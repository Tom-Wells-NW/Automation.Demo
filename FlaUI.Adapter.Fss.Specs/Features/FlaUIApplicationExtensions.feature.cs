// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FlaUI.Adapter.Fss.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("FlaUI Application Extensions")]
    public partial class FlaUIApplicationExtensionsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "FlaUIApplicationExtensions.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FlaUI Application Extensions", "\tIn order to perform UI Automation\r\n\tAs a developer or QA analyst\r\n\tI want to be " +
                    "able to use UI Automation (UIA) to launch, position, and size an application und" +
                    "er test", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting a standard Windows application\'s window position")]
        [NUnit.Framework.CategoryAttribute("FlaUiTests")]
        [NUnit.Framework.TestCaseAttribute("notepad.exe", "false", "100", "100", "TC-FLAEX-0101", null)]
        [NUnit.Framework.TestCaseAttribute("notepad.exe", "false", "450", "100", "TC-FLAEX-0102", null)]
        public void SettingAStandardWindowsApplicationsWindowPosition(string application, string isWSA, string x, string y, string testCase, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FlaUiTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("application", application);
            argumentsOfScenario.Add("isWSA", isWSA);
            argumentsOfScenario.Add("X", x);
            argumentsOfScenario.Add("Y", y);
            argumentsOfScenario.Add("Test Case", testCase);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting a standard Windows application\'s window position", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 10
 testRunner.Given(string.Format("I have launched an application type {0} named {1}", isWSA, application), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 11
  testRunner.When(string.Format("I move the application window to a new {0} and {1} screen position", x, y), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
  testRunner.Then(string.Format("I expect the window\'s new position to be ({0}, {1})", x, y), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Setting the application\'s window position and size")]
        [NUnit.Framework.CategoryAttribute("FlaUiTests")]
        [NUnit.Framework.TestCaseAttribute("notepad.exe", "false", "100", "100", "700", "900", "TC-FLAEX-0201", null)]
        [NUnit.Framework.TestCaseAttribute("notepad.exe", "false", "200", "100", "600", "800", "TC-FLAEX-0202", null)]
        [NUnit.Framework.TestCaseAttribute("notepad.exe", "false", "300", "100", "500", "700", "TC-FLAEX-0203", null)]
        [NUnit.Framework.TestCaseAttribute("notepad.exe", "false", "400", "100", "400", "600", "TC-FLAEX-0204", null)]
        public void SettingTheApplicationsWindowPositionAndSize(string application, string isWSA, string x, string y, string width, string height, string testCase, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "FlaUiTests"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("application", application);
            argumentsOfScenario.Add("isWSA", isWSA);
            argumentsOfScenario.Add("X", x);
            argumentsOfScenario.Add("Y", y);
            argumentsOfScenario.Add("width", width);
            argumentsOfScenario.Add("height", height);
            argumentsOfScenario.Add("Test Case", testCase);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Setting the application\'s window position and size", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given(string.Format("I have launched an application type {0} named {1}", isWSA, application), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
  testRunner.When(string.Format("I move the application window to a new {0} and {1} screen position", x, y), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
   testRunner.And(string.Format("I resize the application window to a new {0} and {1}", width, height), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
  testRunner.Then(string.Format("I expect the window\'s new position to be ({0}, {1})", x, y), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
   testRunner.And(string.Format("I expect the window\'s new size to be ({0}, {1}) pixels", width, height), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
